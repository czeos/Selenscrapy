from pydantic import BaseModel, Field, AliasChoices
from typing import Optional, List, Dict, Any
from typing import Optional, List

from pydantic import BaseModel, Field, ConfigDict

class VkUserSchema(BaseModel):
    id: int = Field(..., description="User ID (integer)",
                    serialization_alias="uid",
                    validation_alias=AliasChoices('id','uid'))
    first_name: str = Field(..., description="User's first name (string)")
    last_name: str = Field(..., description="User's last name (string)")
    # deactivated: Optional[str] = Field(None, description="Account status: 'deleted' or 'banned' (string)")
    # hidden: Optional[int] = Field(None, description="Whether the user is hidden (1 if hidden, integer)")
    # about: Optional[str] = Field(None, description="About me section (string)")
    # activities: Optional[str] = Field(None, description="Activities section (string)")
    # bdate: Optional[str] = Field(None, description="Birthdate in DD.MM.YYYY format (string)")
    # blacklisted: Optional[int] = Field(None, description="Whether the user is blacklisted by the current user (1 or 0, integer)")
    # blacklisted_by_me: Optional[int] = Field(None, description="Whether the user has blacklisted the current user (1 or 0, integer)")
    # books: Optional[str] = Field(None, description="Favorite books section (string)")
    # can_access_closed: Optional[int] = Field(None, description="Whether the user can access their private data (1 or 0, integer)")
    # can_post: Optional[int] = Field(None, description="Whether the user can post on their wall (1 or 0, integer)")
    # can_see_all_posts: Optional[int] = Field(None, description="Whether the user can see all posts (1 or 0, integer)")
    # can_see_audio: Optional[int] = Field(None, description="Whether the user can see audio recordings (1 or 0, integer)")
    # can_send_friend_request: Optional[int] = Field(None, description="Whether the user can send a friend request (1 or 0, integer)")
    # can_write_private_message: Optional[int] = Field(None, description="Whether the user can send private messages (1 or 0, integer)")
    # career: Optional[List[Dict[str, Any]]] = Field(None, description="Career information (array of objects)")
    # city: Optional[Dict[str, Any]] = Field(None, description="City information (object with id and title)")
    # common_count: Optional[int] = Field(None, description="Number of mutual friends (integer)")
    # connections: Optional[Dict[str, Any]] = Field(None, description="External social network accounts (object)")
    # contacts: Optional[Dict[str, Any]] = Field(None, description="User's contact information (object)")
    # counters: Optional[Dict[str, Any]] = Field(None, description="User's counters (object with fields like friends, photos, etc.)")
    # country: Optional[Dict[str, Any]] = Field(None, description="Country information (object with id and title)")
    # crop_photo: Optional[Dict[str, Any]] = Field(None, description="Cropped photo information (object)")
    # domain: Optional[str] = Field(None, description="User's short domain (string)")
    # education: Optional[Dict[str, Any]] = Field(None, description="Education information (object)")
    # exports: Optional[Dict[str, Any]] = Field(None, description="Exported services (object)")
    # followers_count: Optional[int] = Field(None, description="Number of followers (integer)")
    # friend_status: Optional[int] = Field(None, description="Friendship status (integer, 0-3)")
    # games: Optional[str] = Field(None, description="Favorite games section (string)")
    # has_mobile: Optional[int] = Field(None, description="Whether the user has a mobile number (1 or 0, integer)")
    # has_photo: Optional[int] = Field(None, description="Whether the user has a profile photo (1 or 0, integer)")
    # home_town: Optional[str] = Field(None, description="User's hometown (string)")
    # interests: Optional[str] = Field(None, description="User's interests (string)")
    # is_favorite: Optional[int] = Field(None, description="Whether the user is marked as a favorite (1 or 0, integer)")
    # is_friend: Optional[int] = Field(None, description="Whether the user is a friend (1 or 0, integer)")
    # is_hidden_from_feed: Optional[int] = Field(None, description="Whether the user is hidden from feed (1 or 0, integer)")
    # last_seen: Optional[Dict[str, Any]] = Field(None, description="Last seen information (object with time and platform)")
    # lists: Optional[List[int]] = Field(None, description="List IDs where the user is included (array of integers)")
    # maiden_name: Optional[str] = Field(None, description="User's maiden name (string)")
    # military: Optional[List[Dict[str, Any]]] = Field(None, description="Military service information (array of objects)")
    # movies: Optional[str] = Field(None, description="Favorite movies section (string)")
    # music: Optional[str] = Field(None, description="Favorite music section (string)")
    # nickname: Optional[str] = Field(None, description="User's nickname (string)")
    # occupation: Optional[Dict[str, Any]] = Field(None, description="Occupation information (object)")
    # online: Optional[int] = Field(None, description="Whether the user is online (1 or 0, integer)")
    # personal: Optional[Dict[str, Any]] = Field(None, description="Personal information (object)")
    # photo_50: Optional[str] = Field(None, description="URL of the 50x50px profile photo (string)")
    # photo_100: Optional[str] = Field(None, description="URL of the 100x100px profile photo (string)")
    # photo_200_orig: Optional[str] = Field(None, description="URL of the original 200px profile photo (string)")
    # photo_200: Optional[str] = Field(None, description="URL of the 200x200px profile photo (string)")
    # photo_400_orig: Optional[str] = Field(None, description="URL of the original 400px profile photo (string)")
    # photo_id: Optional[str] = Field(None, description="Photo ID (string)")
    # photo_max: Optional[str] = Field(None, description="URL of the maximum size profile photo (string)")
    # photo_max_orig: Optional[str] = Field(None, description="URL of the maximum original size profile photo (string)")
    # quotes: Optional[str] = Field(None, description="Favorite quotes section (string)")
    # relation: Optional[int] = Field(None, description="Relationship status (integer, 1-8)")
    # relatives: Optional[List[Dict[str, Any]]] = Field(None, description="Relatives information (array of objects)")
    # schools: Optional[List[Dict[str, Any]]] = Field(None, description="School information (array of objects)")
    # screen_name: Optional[str] = Field(None, description="Screen name (string)")
    # sex: Optional[int] = Field(None, description="Gender (1: female, 2: male, 0: unknown, integer)")
    # site: Optional[str] = Field(None, description="Website (string)")
    # status: Optional[str] = Field(None, description="Status text (string)")
    # status_audio: Optional[Dict[str, Any]] = Field(None, description="Audio status information (object)")
    # timezone: Optional[int] = Field(None, description="Timezone offset in hours (integer)")
    # trending: Optional[int] = Field(None, description="Whether the user is trending (1 or 0, integer)")
    # tv: Optional[str] = Field(None, description="Favorite TV shows section (string)")
    # universities: Optional[List[Dict[str, Any]]] = Field(None, description="University information (array of objects)")
    # verified: Optional[int] = Field(None, description="Whether the user is verified (1 or 0, integer)")
    # wall_comments: Optional[int] = Field(None, description="Whether wall comments are allowed (1 or 0, integer)")

class VkUserFriendLis(BaseModel):
    id: int = Field(description="User friend list ID (integer)")
    name: str = Field(description="User friend list name (string)")